<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans

       http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security-4.0.xsd
       http://www.springframework.org/schema/security/oauth2
       http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd">

	<!-- Definition of the Authentication Service -->
	<security:http pattern="${oauth.gettoken.url}" create-session="stateless" authentication-manager-ref="clientAuthenticationManager" use-expressions="false">
		<security:intercept-url pattern="${oauth.gettoken.url}" access="IS_AUTHENTICATED_FULLY" method="GET"/>
		
	<!-- do logout'u
		<sec:intercept-url pattern="/api/logout" access="ROLE_USER,ROLE_ADMIN" method="GET" />
		<sec:logout invalidate-session="true" logout-url="/api/logout" />
	-->

		<security:csrf disabled="true" />
		
		<security:anonymous enabled="false"/>
		<security:http-basic entry-point-ref="clientAuthenticationEntryPoint"/>
		<!-- include this only if you need to authenticate clients via request parameters -->
		<security:custom-filter ref="clientCredentialsTokenEndpointFilter" after="BASIC_AUTH_FILTER"/>
		<security:access-denied-handler ref="oauthAccessDeniedHandler"/>
	</security:http>

	<bean id="oauthAuthenticationEntryPoint"
		  class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="dstest"/>
	</bean>

	<bean id="clientAuthenticationEntryPoint"
		  class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="dstest/client"/>
		<property name="typeName" value="Basic"/>
	</bean>

	<bean id="oauthAccessDeniedHandler"
		  class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler"/>

	<bean id="clientCredentialsTokenEndpointFilter"
		  class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<property name="authenticationManager" ref="clientAuthenticationManager"/>
	</bean>

	<!--
		AffirmativeBased decision manager will grant access if any voter said OK.
		UnanimousBased decision manager will grant access ONLY if all voters said OK.
		ConsensusBased decision manager will let the majority decide.
	-->
	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
		<constructor-arg>
            <list>
                <ref bean="hierarchicalJsr250Voter" />
				<ref bean="courseMembershipRequiredVoter" />
            </list>
		</constructor-arg>
	</bean>
    <bean id="hierarchicalJsr250Voter" class="main.security.HierarchicalJsr250Voter">
        <constructor-arg ref="roleHierarchy" />
    </bean>
	<bean id="roleHierarchy" class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl">
        <property name="hierarchy">
            <value>
                ROLE_ADMIN > ROLE_USER
            </value>
        </property>
    </bean>
	<bean id="courseMembershipRequiredVoter" class="main.security.coursemembership.CourseMembershipRequiredVoter" />

	<bean id="clientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<constructor-arg ref="clientDetails"/>
	</bean>

	<bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore" />

	<bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<property name="tokenStore" ref="tokenStore"/>
		<property name="supportRefreshToken" value="true"/>
		<property name="clientDetailsService" ref="clientDetails"/>
	</bean>

	<bean id="oAuth2RequestFactory"
		class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
		<constructor-arg ref="clientDetails" />
	</bean>
		
	<bean id="userApprovalHandler" class="org.springframework.security.oauth2.provider.approval.TokenStoreUserApprovalHandler">
		<property name="requestFactory" ref="oAuth2RequestFactory" />
		<property name="tokenStore" ref="tokenStore"/>
	</bean>

	<!-- TokenJson management -->
	<oauth:authorization-server client-details-service-ref="clientDetails" token-services-ref="tokenServices" user-approval-handler-ref="userApprovalHandler">
		<oauth:authorization-code/>
		<oauth:implicit/>
		<oauth:refresh-token/>
		<oauth:client-credentials/>
		<oauth:password/>
	</oauth:authorization-server>

	<oauth:resource-server id="resourceServerFilter" resource-id="dstest" token-services-ref="tokenServices"/>

	<!-- Client Definition -->
	<!--
		Refresh TokenJson: 2 hours,
		Access TokenJson: 10 minutes
	-->
	<oauth:client-details-service id="clientDetails">
		<oauth:client client-id="${oauth.token.client}"
					  authorized-grant-types="password,authorization_code,refresh_token,implicit,redirect"
					  authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIENT"
					  redirect-uri="/web"
					  scope="read,write,trust"
					  access-token-validity="600"
					  refresh-token-validity="7200"/>
	</oauth:client-details-service>

	<oauth:expression-handler id="oauthExpressionHandler" />
	<oauth:web-expression-handler id="oauthWebExpressionHandler"/>

	<security:authentication-manager id="clientAuthenticationManager">
		<security:authentication-provider user-service-ref="clientDetailsUserService"/>
	</security:authentication-manager>

</beans>